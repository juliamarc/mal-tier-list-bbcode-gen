name: CI/CD

on: [push, pull_request]

jobs:
  test:
    name: Test
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python: ["3.7", "3.8", "3.9"]

    env:
      TOXENV: ${{matrix.python}}

    steps:
      - name: Set up repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{matrix.python}}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run tests
        run: |
          pip install tox
          tox

      - name: Get coverage percent
        if: matrix.python == '3.9' && github.ref == 'refs/heads/main'
        run: |
          python -c "from lxml.etree import parse, HTMLParser;\
          from sys import stdin; print('PC_COV=' + '\n'.join(\
          parse(stdin, parser=HTMLParser()).xpath(\
          '//span[@class=\'pc_cov\']/text()[1]')))" < htmlcov/index.html >> $GITHUB_ENV

      - name: Create coverage badge
        if: matrix.python == '3.9' && github.ref == 'refs/heads/main'
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 0ef08769e202a6eb28e1a4fe176f7eb6
          filename: coverage-badge.json
          label: coverage
          message: ${{ env.PC_COV }}
          color: blue

  publish:
    name: Publish
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-20.04

    steps:
      - name: Set up repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install setuptools build twine

      - name: Build
        run: |
          python -m build

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Get version
        run: |
          echo MTLBG_VERSION=$(grep version= setup.py | cut -d '=' -f 2 | tr -d \'\,) >> $GITHUB_ENV

      - name: Create version badge
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 0ef08769e202a6eb28e1a4fe176f7eb6
          filename: version-badge.json
          label: version
          message: ${{ env.MTLBG_VERSION }}
          color: orange
